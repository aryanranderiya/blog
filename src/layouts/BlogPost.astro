---
import { Image } from "astro:assets";
import type { CollectionEntry } from "astro:content";
import FormattedDate from "../components/FormattedDate.astro";
import GiscusComments from "../components/GiscusComments.astro";
import ShareButtons from "../components/ShareButtons.tsx";
// CSS is now handled by BaseHead component

type Props = CollectionEntry<"blog">["data"] & {
  content?: string;
  readingTime?: string;
};

const {
  title,
  description,
  pubDate,
  updatedDate,
  heroImage,
  tags,
  content,
  readingTime,
} = Astro.props;

// Generate JSON-LD structured data for the blog post
// Extract minutes from readingTime (e.g., "3 min read" -> 3)
const readTimeMinutes = readingTime
  ? parseInt((readingTime as string).match(/\d+/)?.[0] || "0")
  : 0;

const jsonLd = {
  "@context": "https://schema.org",
  "@type": "BlogPosting",
  "@id": `https://blog.aryanranderiya.com${Astro.url.pathname}`,
  url: `https://blog.aryanranderiya.com${Astro.url.pathname}`,
  headline: title,
  description: description,
  datePublished: pubDate.toISOString(),
  dateModified: (updatedDate || pubDate).toISOString(),
  author: {
    "@type": "Person",
    "@id": "https://blog.aryanranderiya.com/#person",
    name: "Aryan Randeriya",
    url: "https://aryanranderiya.com/",
  },
  publisher: {
    "@type": "Person",
    "@id": "https://blog.aryanranderiya.com/#person",
    name: "Aryan Randeriya",
  },
  mainEntityOfPage: {
    "@type": "WebPage",
    "@id": `https://blog.aryanranderiya.com${Astro.url.pathname}`,
  },
  keywords: tags?.join(", ") || "",
  wordCount: content ? content.split(/\s+/).length : 0,
  timeRequired: readTimeMinutes ? `PT${readTimeMinutes}M` : undefined,
  ...(heroImage && {
    image: {
      "@type": "ImageObject",
      url: `https://blog.aryanranderiya.com${heroImage.src}`,
      width: heroImage.width,
      height: heroImage.height,
    },
  }),
};
---

<main>
  <!-- JSON-LD Structured Data for Blog Post -->
  <script type="application/ld+json" set:html={JSON.stringify(jsonLd)} />

  <!-- Scroll Progress Bar -->
  <div
    id="scroll-progress-bar"
    style="position:fixed;top:0;left:0;width:0;height:4px;z-index:50;background:#0091ff;transition:width 0.1s;"
    aria-hidden="true"
  >
  </div>

  <article>
    {
      heroImage && (
        <div class="mb-12">
          <Image
            width={1020}
            height={510}
            src={heroImage}
            alt={`Hero image for blog post: ${title}`}
            class="w-full h-auto rounded-2xl shadow-sm"
          />
        </div>
      )
    }

    <div class="max-w-3xl mx-auto">
      <header class="text-center mb-12">
        <div
          class="flex items-center justify-center gap-4 text-sm text-muted-foreground mb-4 flex-wrap"
        >
          <FormattedDate date={pubDate} />
          {
            readingTime && (
              <span class="flex items-center gap-1">
                <svg
                  class="w-4 h-4"
                  fill="none"
                  stroke="currentColor"
                  viewBox="0 0 24 24"
                >
                  <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    stroke-width="2"
                    d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"
                  />
                </svg>
                {readingTime}
              </span>
            )
          }
        </div>

        {
          updatedDate && (
            <p class="text-sm text-muted-foreground italic mb-4">
              Last updated on <FormattedDate date={updatedDate} />
            </p>
          )
        }

        <h1
          class="text-4xl md:text-5xl font-bold text-foreground leading-tight mb-2"
        >
          {title}
        </h1>

        <p
          class="text-lg text-muted-foreground mb-6 leading-relaxed font-medium"
        >
          {description}
        </p>

        {
          tags && tags.length > 0 && (
            <div class="flex items-center justify-center gap-2 flex-wrap mb-8">
              {tags.map((tag) => (
                <a
                  href={`/posts?tag=${encodeURIComponent(tag)}`}
                  class="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-muted text-muted-foreground hover:bg-muted/80 hover:text-foreground transition-colors capitalize"
                  data-astro-prefetch="tap"
                >
                  {tag}
                </a>
              ))}
            </div>
          )
        }

        <hr class="border-border mb-12" />
      </header>

      <div class="prose text-lg prose-lg max-w-none">
        <slot />
      </div>

      <!-- Share Buttons -->
      <div class="mt-16 pt-8 border-t border-border">
        <ShareButtons
          url={`https://blog.aryanranderiya.com${Astro.url.pathname}`}
          title={"Check out this blog post by Aryan Randeriya:"}
          description={description}
          client:load
        />

        <GiscusComments class="mt-10" />
      </div>
    </div>
  </article>

  <script>
    // Progress bar scroll handler
    function updateScrollProgressBar() {
      const bar = document.getElementById("scroll-progress-bar");
      if (!bar) return;
      const scrollTop = window.scrollY;
      const docHeight =
        document.documentElement.scrollHeight - window.innerHeight;
      const progress = docHeight > 0 ? (scrollTop / docHeight) * 100 : 0;
      bar.style.width = progress + "%";
    }
    window.addEventListener("scroll", updateScrollProgressBar, {
      passive: true,
    });
    window.addEventListener("resize", updateScrollProgressBar);
    document.addEventListener("DOMContentLoaded", updateScrollProgressBar);
  </script>
</main>
