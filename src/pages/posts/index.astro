---
import { Image } from "astro:assets";
import { getCollection } from "astro:content";
import FormattedDate from "../../components/FormattedDate.astro";
import { SITE_TITLE } from "../../consts";
import WideLayout from "../../layouts/WideLayout.astro";
import { calculateReadTime } from "../../lib/utils";
import { Input } from "@/components/ui/input";

const posts = (await getCollection("blog")).sort(
  (a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf()
);
---

<WideLayout
  title={`Blog Posts - ${SITE_TITLE}`}
  description="Browse and search all blog posts"
>
  <div class="mb-8">
    <div class="max-w-2xl mx-auto mb-8">
      <div class="relative">
        <Input type="text" placeholder="Search posts..." id="searchInput" />
        <svg
          class="absolute right-6 top-1/2 transform -translate-y-1/2 w-6 h-6 text-zinc-400"
          fill="none"
          stroke="currentColor"
          viewBox="0 0 24 24"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
        </svg>
      </div>
    </div>

    <!-- Tag Filters -->
    <!--
    <div class="flex flex-wrap gap-3 justify-center mb-12">
      <button
        class="tag-filter active inline-flex items-center px-4 py-2 rounded-full text-sm font-medium bg-zinc-900 text-white hover:bg-zinc-800 transition-colors"
        data-tag=""
      >
        All Posts
      </button>
      {
        posts
          .flatMap((post) => post.data.tags || [])
          .filter((tag, index, arr) => arr.indexOf(tag) === index)
          .sort()
          .map((tag) => (
            <button
              class="tag-filter inline-flex items-center px-4 py-2 rounded-full text-sm font-medium bg-zinc-100 text-zinc-700 hover:bg-zinc-200 transition-colors cursor-pointer"
              data-tag={tag}
            >
              {tag}
            </button>
          ))
      }
    </div>
          -->
  </div>

  <section>
    <div class="grid gap-8" id="results">
      {
        posts.map((post) => {
          const readTime = calculateReadTime(post.body || "");

          return (
            <article
              class="post-item"
              data-post={JSON.stringify({
                title: post.data.title.toLowerCase(),
                description: post.data.description.toLowerCase(),
                tags: (post.data.tags || []).map((tag) => tag.toLowerCase()),
                slug: post.id,
              })}
            >
              <a href={`/blog/${post.id}/`} class="group block">
                <div class="grid md:grid-cols-5 gap-6 items-center">
                  {post.data.heroImage && (
                    <div class="md:col-span-2">
                      <Image
                        width={400}
                        height={200}
                        src={post.data.heroImage}
                        alt=""
                        class="w-full h-auto rounded-xl shadow-sm group-hover:shadow-lg transition-shadow duration-300"
                      />
                    </div>
                  )}

                  <div class="md:col-span-3">
                    <h2 class="text-xl md:text-2xl font-bold text-zinc-900 group-hover:text-zinc-700 transition-colors leading-tight mb-3">
                      {post.data.title}
                    </h2>

                    <div class="flex items-center gap-4 text-sm text-zinc-500 mb-4 flex-wrap">
                      <FormattedDate date={post.data.pubDate} />
                      <span class="flex items-center gap-1">
                        <svg
                          class="w-4 h-4"
                          fill="none"
                          stroke="currentColor"
                          viewBox="0 0 24 24"
                        >
                          <path
                            stroke-linecap="round"
                            stroke-linejoin="round"
                            stroke-width="2"
                            d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"
                          />
                        </svg>
                        {readTime} min read
                      </span>
                    </div>

                    <p class="text-zinc-600 leading-relaxed mb-4">
                      {post.data.description}
                    </p>

                    {post.data.tags && post.data.tags.length > 0 && (
                      <div class="flex items-center gap-2 flex-wrap">
                        {post.data.tags.slice(0, 3).map((tag) => (
                          <span class="inline-flex items-center px-2.5 py-1 rounded-full text-xs font-medium bg-zinc-100 text-zinc-700">
                            {tag}
                          </span>
                        ))}
                        {post.data.tags.length > 3 && (
                          <span class="text-xs text-zinc-500">
                            +{post.data.tags.length - 3} more
                          </span>
                        )}
                      </div>
                    )}
                  </div>
                </div>
              </a>
            </article>
          );
        })
      }
    </div>
  </section>

  <!-- No Results Message -->
  <div class="text-center py-16 hidden" id="noResults">
    <div class="text-6xl mb-4">üîç</div>
    <h3 class="text-2xl font-semibold text-zinc-900 mb-2">No posts found</h3>
    <p class="text-zinc-600">
      Try adjusting your search criteria or browse all posts.
    </p>
  </div>

  <script>
    const searchInput = document.getElementById(
      "searchInput"
    ) as HTMLInputElement;
    const results = document.getElementById("results") as HTMLElement;
    const noResults = document.getElementById("noResults") as HTMLElement;
    const tagFilters = document.querySelectorAll(".tag-filter");
    const postItems = document.querySelectorAll(".post-item");

    let currentTag = "";

    // Check for URL parameters
    const urlParams = new URLSearchParams(window.location.search);
    const tagParam = urlParams.get("tag");
    const queryParam = urlParams.get("q");

    if (queryParam && searchInput) {
      searchInput.value = queryParam;
    }

    if (tagParam) {
      currentTag = tagParam;
      tagFilters.forEach((filter) => {
        filter.classList.remove("active");
        filter.classList.remove("bg-zinc-900", "text-white");
        filter.classList.add("bg-zinc-100", "text-zinc-700");

        if (filter.getAttribute("data-tag") === tagParam) {
          filter.classList.add("active");
          filter.classList.remove("bg-zinc-100", "text-zinc-700");
          filter.classList.add("bg-zinc-900", "text-white");
        }
      });
    }

    function filterPosts() {
      if (!searchInput) return;
      const query = searchInput.value.toLowerCase().trim();
      let visibleCount = 0;

      postItems.forEach((item) => {
        const dataPost = item.getAttribute("data-post");
        if (!dataPost) return;

        const postData = JSON.parse(dataPost);
        const matchesSearch =
          !query ||
          postData.title.includes(query) ||
          postData.description.includes(query) ||
          postData.tags.some((tag: string) => tag.includes(query));

        const matchesTag =
          !currentTag || postData.tags.includes(currentTag.toLowerCase());

        const shouldShow = matchesSearch && matchesTag;

        (item as HTMLElement).style.display = shouldShow ? "block" : "none";
        if (shouldShow) visibleCount++;
      });

      if (results) results.style.display = visibleCount > 0 ? "grid" : "none";
      if (noResults) {
        noResults.classList.toggle("hidden", visibleCount > 0);
        noResults.classList.toggle("block", visibleCount === 0);
      }
    }

    if (searchInput) {
      searchInput.addEventListener("input", filterPosts);
    }

    tagFilters.forEach((filter) => {
      filter.addEventListener("click", () => {
        tagFilters.forEach((f) => {
          f.classList.remove("active");
          f.classList.remove("bg-zinc-900", "text-white");
          f.classList.add("bg-zinc-100", "text-zinc-700");
        });

        filter.classList.add("active");
        filter.classList.remove("bg-zinc-100", "text-zinc-700");
        filter.classList.add("bg-zinc-900", "text-white");

        currentTag = filter.getAttribute("data-tag") || "";
        filterPosts();
      });
    });

    // Initial filter on page load
    filterPosts();
  </script>
</WideLayout>
