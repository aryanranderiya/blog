---
import { Input } from "@/components/ui/input";
import { getCollection } from "astro:content";
import FormattedDate from "@/components/FormattedDate.astro";
import { SITE_TITLE } from "@/consts";
import WideLayout from "@/layouts/WideLayout.astro";
import { SearchIcon } from "@/components/icons/icons";
import MainLayout from "@/layouts/MainLayout.astro";

const posts = (await getCollection("blog")).sort(
  (a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf()
);
---

<MainLayout
  title={`Blog Posts - ${SITE_TITLE}`}
  description="Browse and search all blog posts"
>
  <div class="mb-10 max-w-2xl mx-auto">
    <div class="mb-2">
      <div class="relative">
        <Input type="text" placeholder="Search posts..." id="searchInput" />
        <SearchIcon
          className="absolute right-6 top-1/2 transform -translate-y-1/2 w-6 h-6 text-zinc-400"
        />
      </div>
    </div>

    <!-- Tag Filters -->
    <div class="w-full overflow-x-auto">
      <div class="flex space-x-2 p-4 min-w-max">
        <button
          class="tag-filter active inline-flex items-center px-4 py-2 rounded-full text-sm font-medium bg-zinc-900 text-white hover:bg-zinc-800 transition-colors flex-shrink-0 cursor-pointer hover:text-white"
          data-tag=""
        >
          All Posts
        </button>
        {
          posts
            .flatMap((post) => post.data.tags || [])
            .filter((tag, index, arr) => arr.indexOf(tag) === index)
            .sort()
            .map((tag) => (
              <button
                class="tag-filter inline-flex items-center px-4 py-2 rounded-full text-sm font-medium bg-zinc-100 text-zinc-700 hover:bg-zinc-200 hover:text-zinc-600 transition-colors cursor-pointer text-nowrap capitalize flex-shrink-0"
                data-tag={tag}
              >
                {tag}
              </button>
            ))
        }
      </div>
    </div>
  </div>

  <section>
    <div class="space-y-6" id="results">
      {
        posts.map((post) => {
          return (
            <article
              class="post-item border-b border-zinc-200 pb-6 last:border-b-0"
              data-post={JSON.stringify({
                title: post.data.title.toLowerCase(),
                description: post.data.description.toLowerCase(),
                tags: (post.data.tags || []).map((tag) => tag.toLowerCase()),
                slug: post.id,
              })}
            >
              <a href={`/${post.id}/`} class="group block">
                <div class="space-y-1">
                  <h2 class="text-xl font-bold text-zinc-900 group-hover:text-zinc-700 transition-colors leading-tight">
                    {post.data.title}
                  </h2>

                  <div class="flex justify-between items-end">
                    <p class="text-zinc-500 leading-relaxed line-clamp-2">
                      {post.data.description}
                    </p>
                    <div class="text-sm text-zinc-400 text-nowrap">
                      <FormattedDate date={post.data.pubDate} />
                    </div>
                  </div>
                </div>
              </a>
            </article>
          );
        })
      }
    </div>
  </section>

  <!-- No Results Message -->
  <div class="text-center py-16 hidden" id="noResults">
    <div class="flex justify-center items-center flex-col">
      <div class="text-6xl mb-4 mx-auto text-zinc-400">
        <SearchIcon width={70} height={70} />
      </div>
      <h3 class="text-2xl font-semibold text-zinc-900 mb-2">No posts found</h3>
      <p class="text-zinc-600">
        Try adjusting your search criteria or browse all posts.
      </p>
    </div>
  </div>

  <script>
    const searchInput = document.getElementById(
      "searchInput"
    ) as HTMLInputElement;
    const results = document.getElementById("results") as HTMLElement;
    const noResults = document.getElementById("noResults") as HTMLElement;
    const tagFilters = document.querySelectorAll(".tag-filter");
    const postItems = document.querySelectorAll(".post-item");

    let currentTag = "";

    // Check for URL parameters
    const urlParams = new URLSearchParams(window.location.search);
    const tagParam = urlParams.get("tag");
    const queryParam = urlParams.get("q");

    if (queryParam && searchInput) {
      searchInput.value = queryParam;
    }

    if (tagParam) {
      currentTag = tagParam;
      tagFilters.forEach((filter) => {
        filter.classList.remove("active");
        filter.classList.remove("bg-zinc-900", "text-white");
        filter.classList.add("bg-zinc-100", "text-zinc-700");

        if (filter.getAttribute("data-tag") === tagParam) {
          filter.classList.add("active");
          filter.classList.remove("bg-zinc-100", "text-zinc-700");
          filter.classList.add("bg-zinc-900", "text-white");
        }
      });
    }

    function filterPosts() {
      if (!searchInput) return;
      const query = searchInput.value.toLowerCase().trim();
      let visibleCount = 0;

      postItems.forEach((item) => {
        const dataPost = item.getAttribute("data-post");
        if (!dataPost) return;

        const postData = JSON.parse(dataPost);
        const matchesSearch =
          !query ||
          postData.title.includes(query) ||
          postData.description.includes(query) ||
          postData.tags.some((tag: string) => tag.includes(query));

        const matchesTag =
          !currentTag || postData.tags.includes(currentTag.toLowerCase());

        const shouldShow = matchesSearch && matchesTag;

        (item as HTMLElement).style.display = shouldShow ? "block" : "none";
        if (shouldShow) visibleCount++;
      });

      if (results) results.style.display = visibleCount > 0 ? "block" : "none";
      if (noResults) {
        noResults.classList.toggle("hidden", visibleCount > 0);
        noResults.classList.toggle("block", visibleCount === 0);
      }
    }

    if (searchInput) {
      searchInput.addEventListener("input", filterPosts);
    }

    tagFilters.forEach((filter) => {
      filter.addEventListener("click", () => {
        tagFilters.forEach((f) => {
          f.classList.remove("active");
          f.classList.remove("bg-zinc-900", "text-white");
          f.classList.add("bg-zinc-100", "text-zinc-700");
        });

        filter.classList.add("active");
        filter.classList.remove("bg-zinc-100", "text-zinc-700");
        filter.classList.add("bg-zinc-900", "text-white");

        currentTag = filter.getAttribute("data-tag") || "";
        filterPosts();
      });
    });

    // Initial filter on page load
    filterPosts();
  </script>
</MainLayout>
